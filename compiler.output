Terminals unused in grammar

   INVALIDTOKEN
   RETURN
   UNKNOWN
   UNCLOSED_COMMENT
   UNCLOSED_QUOTE
   BOOL
   CHAR
   INT
   REAL


State 4 conflicts: 1 shift/reduce
State 11 conflicts: 1 shift/reduce
State 22 conflicts: 1 shift/reduce
State 50 conflicts: 1 shift/reduce
State 99 conflicts: 1 shift/reduce
State 101 conflicts: 1 shift/reduce
State 126 conflicts: 1 shift/reduce
State 231 conflicts: 1 shift/reduce
State 246 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program_head decls compound_stat PERIOD
    2        | error

    3 program_head: PROGRAM ID LEFTPAREN ID COMMA ID RIGHTPAREN SEMICOLON
    4             | PROGRAM ID LEFTPAREN error RIGHTPAREN SEMICOLON
    5             | error SEMICOLON

    6 decls: const_decl_part type_decl_part var_decl_part proc_decl_part

    7 const_decl_part: /* empty */
    8                | CONST const_decl_list SEMICOLON
    9                | error SEMICOLON

   10 const_decl_list: const_decl
   11                | const_decl_list SEMICOLON const_decl

   12 const_decl: ID ISEQUAL expr

   13 type_decl_part: /* empty */
   14               | TYPE type_decl_list SEMICOLON
   15               | error SEMICOLON

   16 type_decl_list: /* empty */
   17               | type_decl
   18               | type_decl_list SEMICOLON type_decl

   19 type_decl: ID ISEQUAL type

   20 type: simple_type
   21     | structured_type

   22 simple_type: scalar_type
   23            | ID

   24 scalar_type: LEFTPAREN scalar_list RIGHTPAREN
   25            | LEFTPAREN error RIGHTPAREN

   26 scalar_list: ID
   27            | scalar_list COMMA ID

   28 structured_type: ARRAY closed_array_type OF type
   29                | RECORD field_list END
   30                | error END

   31 closed_array_type: LEFTBRACKET array_type RIGHTBRACKET
   32                  | LEFTBRACKET error RIGHTBRACKET

   33 array_type: expr
   34           | expr DOUBLEPERIOD expr

   35 field_list: field
   36           | field_list SEMICOLON field
   37           | error SEMICOLON field_list

   38 field: ID COLON type

   39 var_decl_part: /* empty */
   40              | VAR var_decl_list SEMICOLON
   41              | error SEMICOLON

   42 var_decl_list: var_decl
   43              | var_decl_list SEMICOLON var_decl

   44 var_decl: ID COLON type
   45         | ID COMMA var_decl

   46 proc_decl_part: /* empty */
   47               | proc_decl_list

   48 proc_decl_list: proc_decl
   49               | proc_decl_list proc_decl

   50 proc_decl: proc_heading decls compound_stat SEMICOLON

   51 proc_heading: PROCEDURE ID f_parm_decl SEMICOLON
   52             | FUNCTION ID f_parm_decl COLON ID SEMICOLON
   53             | error SEMICOLON

   54 f_parm_decl: LEFTPAREN f_parm_list RIGHTPAREN
   55            | LEFTPAREN error RIGHTPAREN
   56            | LEFTPAREN RIGHTPAREN

   57 f_parm_list: f_parm
   58            | f_parm_list SEMICOLON f_parm
   59            | error SEMICOLON f_parm_list

   60 f_parm: type COLON type
   61       | VAR type COLON type

   62 compound_stat: BEGIN_ stat_list END
   63              | error BEGIN_ stat_list END
   64              | BEGIN_ error END

   65 stat_list: stat
   66          | stat_list SEMICOLON stat
   67          | error SEMICOLON stat_list

   68 stat: simple_stat
   69     | struct_stat

   70 simple_stat: /* empty */
   71            | var ASSIGN expr
   72            | proc_invok
   73            | compound_stat

   74 proc_invok: plist_finvok RIGHTPAREN
   75           | ID LEFTPAREN RIGHTPAREN

   76 var: ID
   77    | var PERIOD ID
   78    | subscripted_var RIGHTBRACKET
   79    | error RIGHTBRACKET

   80 subscripted_var: var LEFTBRACKET expr
   81                | subscripted_var COMMA expr

   82 expr: simple_expr
   83     | expr ISEQUAL simple_expr
   84     | expr NOTEQUAL simple_expr
   85     | expr LESSTHANEQUALS simple_expr
   86     | expr LESSTHAN simple_expr
   87     | expr GREATERTHANEQUALS simple_expr
   88     | expr GREATERTHAN simple_expr

   89 simple_expr: term
   90            | PLUS term
   91            | MINUS term
   92            | simple_expr PLUS term
   93            | simple_expr MINUS term
   94            | simple_expr OR term

   95 term: factor
   96     | term MULTIPLY factor
   97     | term DIVIDE factor
   98     | term DIV factor
   99     | term MOD factor
  100     | term AND factor

  101 factor: var
  102       | unsigned_const
  103       | LEFTPAREN expr RIGHTPAREN
  104       | LEFTPAREN error RIGHTPAREN
  105       | func_invok
  106       | NOT factor

  107 unsigned_const: unsigned_num
  108               | STRING

  109 unsigned_num: INT_CONST
  110             | REAL_CONST

  111 func_invok: plist_finvok RIGHTPAREN
  112           | ID LEFTPAREN RIGHTPAREN

  113 plist_finvok: ID LEFTPAREN parm
  114             | plist_finvok COMMA parm

  115 parm: expr

  116 struct_stat: IF expr THEN matched_stat ELSE stat
  117            | IF expr THEN stat
  118            | WHILE expr DO stat
  119            | CONTINUE
  120            | EXIT

  121 matched_stat: simple_stat
  122             | IF expr THEN matched_stat ELSE matched_stat
  123             | WHILE expr DO matched_stat
  124             | CONTINUE
  125             | EXIT


Terminals, with rules where they appear

$end (0) 0
error (256) 2 4 5 9 15 25 30 32 37 41 53 55 59 63 64 67 79 104
AND (258) 100
ARRAY (259) 28
BEGIN_ (260) 62 63 64
CONST (261) 8
CONTINUE (262) 119 124
DO (263) 118 123
ELSE (264) 116 122
END (265) 29 30 62 63 64
EXIT (266) 120 125
FUNCTION (267) 52
IF (268) 116 117 122
NOT (269) 106
OF (270) 28
OR (271) 94
PROCEDURE (272) 51
PROGRAM (273) 3 4
RECORD (274) 29
THEN (275) 116 117 122
TYPE (276) 14
VAR (277) 40 61
WHILE (278) 118 123
ISEQUAL (279) 12 19 83
NOTEQUAL (280) 84
LESSTHAN (281) 86
GREATERTHAN (282) 88
LESSTHANEQUALS (283) 85
GREATERTHANEQUALS (284) 87
PLUS (285) 90 92
MINUS (286) 91 93
MULTIPLY (287) 96
DIVIDE (288) 97
DIV (289) 98
MOD (290) 99
ASSIGN (291) 71
LEFTPAREN (292) 3 4 24 25 54 55 56 75 103 104 112 113
RIGHTPAREN (293) 3 4 24 25 54 55 56 74 75 103 104 111 112
PERIOD (294) 1 77
SEMICOLON (295) 3 4 5 8 9 11 14 15 18 36 37 40 41 43 50 51 52 53 58
    59 66 67
COLON (296) 38 44 52 60 61
LEFTBRACKET (297) 31 32 80
RIGHTBRACKET (298) 31 32 78 79
COMMA (299) 3 27 45 81 114
DOUBLEPERIOD (300) 34
INVALIDTOKEN (301)
ID (302) 3 4 12 19 23 26 27 38 44 45 51 52 75 76 77 112 113
RETURN (303)
UNKNOWN (304)
UNCLOSED_COMMENT (305)
UNCLOSED_QUOTE (306)
INT_CONST (307) 109
REAL_CONST (308) 110
BOOL (309)
CHAR (310)
INT (311)
REAL (312)
STRING (313) 108


Nonterminals, with rules where they appear

$accept (59)
    on left: 0
program (60)
    on left: 1 2, on right: 0
program_head (61)
    on left: 3 4 5, on right: 1
decls (62)
    on left: 6, on right: 1 50
const_decl_part (63)
    on left: 7 8 9, on right: 6
const_decl_list (64)
    on left: 10 11, on right: 8 11
const_decl (65)
    on left: 12, on right: 10 11
type_decl_part (66)
    on left: 13 14 15, on right: 6
type_decl_list (67)
    on left: 16 17 18, on right: 14 18
type_decl (68)
    on left: 19, on right: 17 18
type (69)
    on left: 20 21, on right: 19 28 38 44 60 61
simple_type (70)
    on left: 22 23, on right: 20
scalar_type (71)
    on left: 24 25, on right: 22
scalar_list (72)
    on left: 26 27, on right: 24 27
structured_type (73)
    on left: 28 29 30, on right: 21
closed_array_type (74)
    on left: 31 32, on right: 28
array_type (75)
    on left: 33 34, on right: 31
field_list (76)
    on left: 35 36 37, on right: 29 36 37
field (77)
    on left: 38, on right: 35 36
var_decl_part (78)
    on left: 39 40 41, on right: 6
var_decl_list (79)
    on left: 42 43, on right: 40 43
var_decl (80)
    on left: 44 45, on right: 42 43 45
proc_decl_part (81)
    on left: 46 47, on right: 6
proc_decl_list (82)
    on left: 48 49, on right: 47 49
proc_decl (83)
    on left: 50, on right: 48 49
proc_heading (84)
    on left: 51 52 53, on right: 50
f_parm_decl (85)
    on left: 54 55 56, on right: 51 52
f_parm_list (86)
    on left: 57 58 59, on right: 54 58 59
f_parm (87)
    on left: 60 61, on right: 57 58
compound_stat (88)
    on left: 62 63 64, on right: 1 50 73
stat_list (89)
    on left: 65 66 67, on right: 62 63 66 67
stat (90)
    on left: 68 69, on right: 65 66 116 117 118
simple_stat (91)
    on left: 70 71 72 73, on right: 68 121
proc_invok (92)
    on left: 74 75, on right: 72
var (93)
    on left: 76 77 78 79, on right: 71 77 80 101
subscripted_var (94)
    on left: 80 81, on right: 78 81
expr (95)
    on left: 82 83 84 85 86 87 88, on right: 12 33 34 71 80 81 83 84
    85 86 87 88 103 115 116 117 118 122 123
simple_expr (96)
    on left: 89 90 91 92 93 94, on right: 82 83 84 85 86 87 88 92 93
    94
term (97)
    on left: 95 96 97 98 99 100, on right: 89 90 91 92 93 94 96 97
    98 99 100
factor (98)
    on left: 101 102 103 104 105 106, on right: 95 96 97 98 99 100
    106
unsigned_const (99)
    on left: 107 108, on right: 102
unsigned_num (100)
    on left: 109 110, on right: 107
func_invok (101)
    on left: 111 112, on right: 105
plist_finvok (102)
    on left: 113 114, on right: 74 111 114
parm (103)
    on left: 115, on right: 113 114
struct_stat (104)
    on left: 116 117 118 119 120, on right: 69
matched_stat (105)
    on left: 121 122 123 124 125, on right: 116 122 123


state 0

    0 $accept: . program $end

    error    shift, and go to state 1
    PROGRAM  shift, and go to state 2

    program       go to state 3
    program_head  go to state 4


state 1

    2 program: error .
    5 program_head: error . SEMICOLON

    SEMICOLON  shift, and go to state 5

    $default  reduce using rule 2 (program)


state 2

    3 program_head: PROGRAM . ID LEFTPAREN ID COMMA ID RIGHTPAREN SEMICOLON
    4             | PROGRAM . ID LEFTPAREN error RIGHTPAREN SEMICOLON

    ID  shift, and go to state 6


state 3

    0 $accept: program . $end

    $end  shift, and go to state 7


state 4

    1 program: program_head . decls compound_stat PERIOD

    error  shift, and go to state 8
    CONST  shift, and go to state 9

    error      [reduce using rule 7 (const_decl_part)]
    BEGIN_     reduce using rule 7 (const_decl_part)
    FUNCTION   reduce using rule 7 (const_decl_part)
    PROCEDURE  reduce using rule 7 (const_decl_part)
    TYPE       reduce using rule 7 (const_decl_part)
    VAR        reduce using rule 7 (const_decl_part)

    decls            go to state 10
    const_decl_part  go to state 11


state 5

    5 program_head: error SEMICOLON .

    $default  reduce using rule 5 (program_head)


state 6

    3 program_head: PROGRAM ID . LEFTPAREN ID COMMA ID RIGHTPAREN SEMICOLON
    4             | PROGRAM ID . LEFTPAREN error RIGHTPAREN SEMICOLON

    LEFTPAREN  shift, and go to state 12


state 7

    0 $accept: program $end .

    $default  accept


state 8

    9 const_decl_part: error . SEMICOLON

    SEMICOLON  shift, and go to state 13


state 9

    8 const_decl_part: CONST . const_decl_list SEMICOLON

    ID  shift, and go to state 14

    const_decl_list  go to state 15
    const_decl       go to state 16


state 10

    1 program: program_head decls . compound_stat PERIOD

    error   shift, and go to state 17
    BEGIN_  shift, and go to state 18

    compound_stat  go to state 19


state 11

    6 decls: const_decl_part . type_decl_part var_decl_part proc_decl_part

    error  shift, and go to state 20
    TYPE   shift, and go to state 21

    error      [reduce using rule 13 (type_decl_part)]
    BEGIN_     reduce using rule 13 (type_decl_part)
    FUNCTION   reduce using rule 13 (type_decl_part)
    PROCEDURE  reduce using rule 13 (type_decl_part)
    VAR        reduce using rule 13 (type_decl_part)

    type_decl_part  go to state 22


state 12

    3 program_head: PROGRAM ID LEFTPAREN . ID COMMA ID RIGHTPAREN SEMICOLON
    4             | PROGRAM ID LEFTPAREN . error RIGHTPAREN SEMICOLON

    error  shift, and go to state 23
    ID     shift, and go to state 24


state 13

    9 const_decl_part: error SEMICOLON .

    $default  reduce using rule 9 (const_decl_part)


state 14

   12 const_decl: ID . ISEQUAL expr

    ISEQUAL  shift, and go to state 25


state 15

    8 const_decl_part: CONST const_decl_list . SEMICOLON
   11 const_decl_list: const_decl_list . SEMICOLON const_decl

    SEMICOLON  shift, and go to state 26


state 16

   10 const_decl_list: const_decl .

    $default  reduce using rule 10 (const_decl_list)


state 17

   63 compound_stat: error . BEGIN_ stat_list END

    BEGIN_  shift, and go to state 27


state 18

   62 compound_stat: BEGIN_ . stat_list END
   64              | BEGIN_ . error END

    error     shift, and go to state 28
    BEGIN_    shift, and go to state 18
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    IF        shift, and go to state 31
    WHILE     shift, and go to state 32
    ID        shift, and go to state 33

    END        reduce using rule 70 (simple_stat)
    SEMICOLON  reduce using rule 70 (simple_stat)

    compound_stat    go to state 34
    stat_list        go to state 35
    stat             go to state 36
    simple_stat      go to state 37
    proc_invok       go to state 38
    var              go to state 39
    subscripted_var  go to state 40
    plist_finvok     go to state 41
    struct_stat      go to state 42


state 19

    1 program: program_head decls compound_stat . PERIOD

    PERIOD  shift, and go to state 43


state 20

   15 type_decl_part: error . SEMICOLON

    SEMICOLON  shift, and go to state 44


state 21

   14 type_decl_part: TYPE . type_decl_list SEMICOLON

    ID  shift, and go to state 45

    $default  reduce using rule 16 (type_decl_list)

    type_decl_list  go to state 46
    type_decl       go to state 47


state 22

    6 decls: const_decl_part type_decl_part . var_decl_part proc_decl_part

    error  shift, and go to state 48
    VAR    shift, and go to state 49

    error      [reduce using rule 39 (var_decl_part)]
    BEGIN_     reduce using rule 39 (var_decl_part)
    FUNCTION   reduce using rule 39 (var_decl_part)
    PROCEDURE  reduce using rule 39 (var_decl_part)

    var_decl_part  go to state 50


state 23

    4 program_head: PROGRAM ID LEFTPAREN error . RIGHTPAREN SEMICOLON

    RIGHTPAREN  shift, and go to state 51


state 24

    3 program_head: PROGRAM ID LEFTPAREN ID . COMMA ID RIGHTPAREN SEMICOLON

    COMMA  shift, and go to state 52


state 25

   12 const_decl: ID ISEQUAL . expr

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    expr             go to state 63
    simple_expr      go to state 64
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 26

    8 const_decl_part: CONST const_decl_list SEMICOLON .
   11 const_decl_list: const_decl_list SEMICOLON . const_decl

    ID  shift, and go to state 14

    $default  reduce using rule 8 (const_decl_part)

    const_decl  go to state 71


state 27

   63 compound_stat: error BEGIN_ . stat_list END

    error     shift, and go to state 72
    BEGIN_    shift, and go to state 18
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    IF        shift, and go to state 31
    WHILE     shift, and go to state 32
    ID        shift, and go to state 33

    END        reduce using rule 70 (simple_stat)
    SEMICOLON  reduce using rule 70 (simple_stat)

    compound_stat    go to state 34
    stat_list        go to state 73
    stat             go to state 36
    simple_stat      go to state 37
    proc_invok       go to state 38
    var              go to state 39
    subscripted_var  go to state 40
    plist_finvok     go to state 41
    struct_stat      go to state 42


state 28

   63 compound_stat: error . BEGIN_ stat_list END
   64              | BEGIN_ error . END
   67 stat_list: error . SEMICOLON stat_list
   79 var: error . RIGHTBRACKET

    BEGIN_        shift, and go to state 27
    END           shift, and go to state 74
    SEMICOLON     shift, and go to state 75
    RIGHTBRACKET  shift, and go to state 76


state 29

  119 struct_stat: CONTINUE .

    $default  reduce using rule 119 (struct_stat)


state 30

  120 struct_stat: EXIT .

    $default  reduce using rule 120 (struct_stat)


state 31

  116 struct_stat: IF . expr THEN matched_stat ELSE stat
  117            | IF . expr THEN stat

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    expr             go to state 77
    simple_expr      go to state 64
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 32

  118 struct_stat: WHILE . expr DO stat

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    expr             go to state 78
    simple_expr      go to state 64
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 33

   75 proc_invok: ID . LEFTPAREN RIGHTPAREN
   76 var: ID .
  113 plist_finvok: ID . LEFTPAREN parm

    LEFTPAREN  shift, and go to state 79

    $default  reduce using rule 76 (var)


state 34

   73 simple_stat: compound_stat .

    $default  reduce using rule 73 (simple_stat)


state 35

   62 compound_stat: BEGIN_ stat_list . END
   66 stat_list: stat_list . SEMICOLON stat

    END        shift, and go to state 80
    SEMICOLON  shift, and go to state 81


state 36

   65 stat_list: stat .

    $default  reduce using rule 65 (stat_list)


state 37

   68 stat: simple_stat .

    $default  reduce using rule 68 (stat)


state 38

   72 simple_stat: proc_invok .

    $default  reduce using rule 72 (simple_stat)


state 39

   71 simple_stat: var . ASSIGN expr
   77 var: var . PERIOD ID
   80 subscripted_var: var . LEFTBRACKET expr

    ASSIGN       shift, and go to state 82
    PERIOD       shift, and go to state 83
    LEFTBRACKET  shift, and go to state 84


state 40

   78 var: subscripted_var . RIGHTBRACKET
   81 subscripted_var: subscripted_var . COMMA expr

    RIGHTBRACKET  shift, and go to state 85
    COMMA         shift, and go to state 86


state 41

   74 proc_invok: plist_finvok . RIGHTPAREN
  114 plist_finvok: plist_finvok . COMMA parm

    RIGHTPAREN  shift, and go to state 87
    COMMA       shift, and go to state 88


state 42

   69 stat: struct_stat .

    $default  reduce using rule 69 (stat)


state 43

    1 program: program_head decls compound_stat PERIOD .

    $default  reduce using rule 1 (program)


state 44

   15 type_decl_part: error SEMICOLON .

    $default  reduce using rule 15 (type_decl_part)


state 45

   19 type_decl: ID . ISEQUAL type

    ISEQUAL  shift, and go to state 89


state 46

   14 type_decl_part: TYPE type_decl_list . SEMICOLON
   18 type_decl_list: type_decl_list . SEMICOLON type_decl

    SEMICOLON  shift, and go to state 90


state 47

   17 type_decl_list: type_decl .

    $default  reduce using rule 17 (type_decl_list)


state 48

   41 var_decl_part: error . SEMICOLON

    SEMICOLON  shift, and go to state 91


state 49

   40 var_decl_part: VAR . var_decl_list SEMICOLON

    ID  shift, and go to state 92

    var_decl_list  go to state 93
    var_decl       go to state 94


state 50

    6 decls: const_decl_part type_decl_part var_decl_part . proc_decl_part

    error      shift, and go to state 95
    FUNCTION   shift, and go to state 96
    PROCEDURE  shift, and go to state 97

    error   [reduce using rule 46 (proc_decl_part)]
    BEGIN_  reduce using rule 46 (proc_decl_part)

    proc_decl_part  go to state 98
    proc_decl_list  go to state 99
    proc_decl       go to state 100
    proc_heading    go to state 101


state 51

    4 program_head: PROGRAM ID LEFTPAREN error RIGHTPAREN . SEMICOLON

    SEMICOLON  shift, and go to state 102


state 52

    3 program_head: PROGRAM ID LEFTPAREN ID COMMA . ID RIGHTPAREN SEMICOLON

    ID  shift, and go to state 103


state 53

   79 var: error . RIGHTBRACKET

    RIGHTBRACKET  shift, and go to state 76


state 54

  106 factor: NOT . factor

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    factor           go to state 104
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 55

   90 simple_expr: PLUS . term

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    term             go to state 105
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 56

   91 simple_expr: MINUS . term

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    term             go to state 106
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 57

  103 factor: LEFTPAREN . expr RIGHTPAREN
  104       | LEFTPAREN . error RIGHTPAREN

    error       shift, and go to state 107
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    expr             go to state 108
    simple_expr      go to state 64
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 58

   76 var: ID .
  112 func_invok: ID . LEFTPAREN RIGHTPAREN
  113 plist_finvok: ID . LEFTPAREN parm

    LEFTPAREN  shift, and go to state 109

    $default  reduce using rule 76 (var)


state 59

  109 unsigned_num: INT_CONST .

    $default  reduce using rule 109 (unsigned_num)


state 60

  110 unsigned_num: REAL_CONST .

    $default  reduce using rule 110 (unsigned_num)


state 61

  108 unsigned_const: STRING .

    $default  reduce using rule 108 (unsigned_const)


state 62

   77 var: var . PERIOD ID
   80 subscripted_var: var . LEFTBRACKET expr
  101 factor: var .

    PERIOD       shift, and go to state 83
    LEFTBRACKET  shift, and go to state 84

    $default  reduce using rule 101 (factor)


state 63

   12 const_decl: ID ISEQUAL expr .
   83 expr: expr . ISEQUAL simple_expr
   84     | expr . NOTEQUAL simple_expr
   85     | expr . LESSTHANEQUALS simple_expr
   86     | expr . LESSTHAN simple_expr
   87     | expr . GREATERTHANEQUALS simple_expr
   88     | expr . GREATERTHAN simple_expr

    ISEQUAL            shift, and go to state 110
    NOTEQUAL           shift, and go to state 111
    LESSTHAN           shift, and go to state 112
    GREATERTHAN        shift, and go to state 113
    LESSTHANEQUALS     shift, and go to state 114
    GREATERTHANEQUALS  shift, and go to state 115

    $default  reduce using rule 12 (const_decl)


state 64

   82 expr: simple_expr .
   92 simple_expr: simple_expr . PLUS term
   93            | simple_expr . MINUS term
   94            | simple_expr . OR term

    OR     shift, and go to state 116
    PLUS   shift, and go to state 117
    MINUS  shift, and go to state 118

    $default  reduce using rule 82 (expr)


state 65

   89 simple_expr: term .
   96 term: term . MULTIPLY factor
   97     | term . DIVIDE factor
   98     | term . DIV factor
   99     | term . MOD factor
  100     | term . AND factor

    AND       shift, and go to state 119
    MULTIPLY  shift, and go to state 120
    DIVIDE    shift, and go to state 121
    DIV       shift, and go to state 122
    MOD       shift, and go to state 123

    $default  reduce using rule 89 (simple_expr)


state 66

   95 term: factor .

    $default  reduce using rule 95 (term)


state 67

  102 factor: unsigned_const .

    $default  reduce using rule 102 (factor)


state 68

  107 unsigned_const: unsigned_num .

    $default  reduce using rule 107 (unsigned_const)


state 69

  105 factor: func_invok .

    $default  reduce using rule 105 (factor)


state 70

  111 func_invok: plist_finvok . RIGHTPAREN
  114 plist_finvok: plist_finvok . COMMA parm

    RIGHTPAREN  shift, and go to state 124
    COMMA       shift, and go to state 88


state 71

   11 const_decl_list: const_decl_list SEMICOLON const_decl .

    $default  reduce using rule 11 (const_decl_list)


state 72

   63 compound_stat: error . BEGIN_ stat_list END
   67 stat_list: error . SEMICOLON stat_list
   79 var: error . RIGHTBRACKET

    BEGIN_        shift, and go to state 27
    SEMICOLON     shift, and go to state 75
    RIGHTBRACKET  shift, and go to state 76


state 73

   63 compound_stat: error BEGIN_ stat_list . END
   66 stat_list: stat_list . SEMICOLON stat

    END        shift, and go to state 125
    SEMICOLON  shift, and go to state 81


state 74

   64 compound_stat: BEGIN_ error END .

    $default  reduce using rule 64 (compound_stat)


state 75

   67 stat_list: error SEMICOLON . stat_list

    error     shift, and go to state 72
    BEGIN_    shift, and go to state 18
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    IF        shift, and go to state 31
    WHILE     shift, and go to state 32
    ID        shift, and go to state 33

    END        reduce using rule 70 (simple_stat)
    SEMICOLON  reduce using rule 70 (simple_stat)

    compound_stat    go to state 34
    stat_list        go to state 126
    stat             go to state 36
    simple_stat      go to state 37
    proc_invok       go to state 38
    var              go to state 39
    subscripted_var  go to state 40
    plist_finvok     go to state 41
    struct_stat      go to state 42


state 76

   79 var: error RIGHTBRACKET .

    $default  reduce using rule 79 (var)


state 77

   83 expr: expr . ISEQUAL simple_expr
   84     | expr . NOTEQUAL simple_expr
   85     | expr . LESSTHANEQUALS simple_expr
   86     | expr . LESSTHAN simple_expr
   87     | expr . GREATERTHANEQUALS simple_expr
   88     | expr . GREATERTHAN simple_expr
  116 struct_stat: IF expr . THEN matched_stat ELSE stat
  117            | IF expr . THEN stat

    THEN               shift, and go to state 127
    ISEQUAL            shift, and go to state 110
    NOTEQUAL           shift, and go to state 111
    LESSTHAN           shift, and go to state 112
    GREATERTHAN        shift, and go to state 113
    LESSTHANEQUALS     shift, and go to state 114
    GREATERTHANEQUALS  shift, and go to state 115


state 78

   83 expr: expr . ISEQUAL simple_expr
   84     | expr . NOTEQUAL simple_expr
   85     | expr . LESSTHANEQUALS simple_expr
   86     | expr . LESSTHAN simple_expr
   87     | expr . GREATERTHANEQUALS simple_expr
   88     | expr . GREATERTHAN simple_expr
  118 struct_stat: WHILE expr . DO stat

    DO                 shift, and go to state 128
    ISEQUAL            shift, and go to state 110
    NOTEQUAL           shift, and go to state 111
    LESSTHAN           shift, and go to state 112
    GREATERTHAN        shift, and go to state 113
    LESSTHANEQUALS     shift, and go to state 114
    GREATERTHANEQUALS  shift, and go to state 115


state 79

   75 proc_invok: ID LEFTPAREN . RIGHTPAREN
  113 plist_finvok: ID LEFTPAREN . parm

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    RIGHTPAREN  shift, and go to state 129
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    expr             go to state 130
    simple_expr      go to state 64
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70
    parm             go to state 131


state 80

   62 compound_stat: BEGIN_ stat_list END .

    $default  reduce using rule 62 (compound_stat)


state 81

   66 stat_list: stat_list SEMICOLON . stat

    error     shift, and go to state 132
    BEGIN_    shift, and go to state 18
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    IF        shift, and go to state 31
    WHILE     shift, and go to state 32
    ID        shift, and go to state 33

    END        reduce using rule 70 (simple_stat)
    SEMICOLON  reduce using rule 70 (simple_stat)

    compound_stat    go to state 34
    stat             go to state 133
    simple_stat      go to state 37
    proc_invok       go to state 38
    var              go to state 39
    subscripted_var  go to state 40
    plist_finvok     go to state 41
    struct_stat      go to state 42


state 82

   71 simple_stat: var ASSIGN . expr

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    expr             go to state 134
    simple_expr      go to state 64
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 83

   77 var: var PERIOD . ID

    ID  shift, and go to state 135


state 84

   80 subscripted_var: var LEFTBRACKET . expr

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    expr             go to state 136
    simple_expr      go to state 64
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 85

   78 var: subscripted_var RIGHTBRACKET .

    $default  reduce using rule 78 (var)


state 86

   81 subscripted_var: subscripted_var COMMA . expr

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    expr             go to state 137
    simple_expr      go to state 64
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 87

   74 proc_invok: plist_finvok RIGHTPAREN .

    $default  reduce using rule 74 (proc_invok)


state 88

  114 plist_finvok: plist_finvok COMMA . parm

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    expr             go to state 130
    simple_expr      go to state 64
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70
    parm             go to state 138


state 89

   19 type_decl: ID ISEQUAL . type

    error      shift, and go to state 139
    ARRAY      shift, and go to state 140
    RECORD     shift, and go to state 141
    LEFTPAREN  shift, and go to state 142
    ID         shift, and go to state 143

    type             go to state 144
    simple_type      go to state 145
    scalar_type      go to state 146
    structured_type  go to state 147


state 90

   14 type_decl_part: TYPE type_decl_list SEMICOLON .
   18 type_decl_list: type_decl_list SEMICOLON . type_decl

    ID  shift, and go to state 45

    $default  reduce using rule 14 (type_decl_part)

    type_decl  go to state 148


state 91

   41 var_decl_part: error SEMICOLON .

    $default  reduce using rule 41 (var_decl_part)


state 92

   44 var_decl: ID . COLON type
   45         | ID . COMMA var_decl

    COLON  shift, and go to state 149
    COMMA  shift, and go to state 150


state 93

   40 var_decl_part: VAR var_decl_list . SEMICOLON
   43 var_decl_list: var_decl_list . SEMICOLON var_decl

    SEMICOLON  shift, and go to state 151


state 94

   42 var_decl_list: var_decl .

    $default  reduce using rule 42 (var_decl_list)


state 95

   53 proc_heading: error . SEMICOLON

    SEMICOLON  shift, and go to state 152


state 96

   52 proc_heading: FUNCTION . ID f_parm_decl COLON ID SEMICOLON

    ID  shift, and go to state 153


state 97

   51 proc_heading: PROCEDURE . ID f_parm_decl SEMICOLON

    ID  shift, and go to state 154


state 98

    6 decls: const_decl_part type_decl_part var_decl_part proc_decl_part .

    $default  reduce using rule 6 (decls)


state 99

   47 proc_decl_part: proc_decl_list .
   49 proc_decl_list: proc_decl_list . proc_decl

    error      shift, and go to state 95
    FUNCTION   shift, and go to state 96
    PROCEDURE  shift, and go to state 97

    error   [reduce using rule 47 (proc_decl_part)]
    BEGIN_  reduce using rule 47 (proc_decl_part)

    proc_decl     go to state 155
    proc_heading  go to state 101


state 100

   48 proc_decl_list: proc_decl .

    $default  reduce using rule 48 (proc_decl_list)


state 101

   50 proc_decl: proc_heading . decls compound_stat SEMICOLON

    error  shift, and go to state 8
    CONST  shift, and go to state 9

    error      [reduce using rule 7 (const_decl_part)]
    BEGIN_     reduce using rule 7 (const_decl_part)
    FUNCTION   reduce using rule 7 (const_decl_part)
    PROCEDURE  reduce using rule 7 (const_decl_part)
    TYPE       reduce using rule 7 (const_decl_part)
    VAR        reduce using rule 7 (const_decl_part)

    decls            go to state 156
    const_decl_part  go to state 11


state 102

    4 program_head: PROGRAM ID LEFTPAREN error RIGHTPAREN SEMICOLON .

    $default  reduce using rule 4 (program_head)


state 103

    3 program_head: PROGRAM ID LEFTPAREN ID COMMA ID . RIGHTPAREN SEMICOLON

    RIGHTPAREN  shift, and go to state 157


state 104

  106 factor: NOT factor .

    $default  reduce using rule 106 (factor)


state 105

   90 simple_expr: PLUS term .
   96 term: term . MULTIPLY factor
   97     | term . DIVIDE factor
   98     | term . DIV factor
   99     | term . MOD factor
  100     | term . AND factor

    AND       shift, and go to state 119
    MULTIPLY  shift, and go to state 120
    DIVIDE    shift, and go to state 121
    DIV       shift, and go to state 122
    MOD       shift, and go to state 123

    $default  reduce using rule 90 (simple_expr)


state 106

   91 simple_expr: MINUS term .
   96 term: term . MULTIPLY factor
   97     | term . DIVIDE factor
   98     | term . DIV factor
   99     | term . MOD factor
  100     | term . AND factor

    AND       shift, and go to state 119
    MULTIPLY  shift, and go to state 120
    DIVIDE    shift, and go to state 121
    DIV       shift, and go to state 122
    MOD       shift, and go to state 123

    $default  reduce using rule 91 (simple_expr)


state 107

   79 var: error . RIGHTBRACKET
  104 factor: LEFTPAREN error . RIGHTPAREN

    RIGHTPAREN    shift, and go to state 158
    RIGHTBRACKET  shift, and go to state 76


state 108

   83 expr: expr . ISEQUAL simple_expr
   84     | expr . NOTEQUAL simple_expr
   85     | expr . LESSTHANEQUALS simple_expr
   86     | expr . LESSTHAN simple_expr
   87     | expr . GREATERTHANEQUALS simple_expr
   88     | expr . GREATERTHAN simple_expr
  103 factor: LEFTPAREN expr . RIGHTPAREN

    ISEQUAL            shift, and go to state 110
    NOTEQUAL           shift, and go to state 111
    LESSTHAN           shift, and go to state 112
    GREATERTHAN        shift, and go to state 113
    LESSTHANEQUALS     shift, and go to state 114
    GREATERTHANEQUALS  shift, and go to state 115
    RIGHTPAREN         shift, and go to state 159


state 109

  112 func_invok: ID LEFTPAREN . RIGHTPAREN
  113 plist_finvok: ID LEFTPAREN . parm

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    RIGHTPAREN  shift, and go to state 160
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    expr             go to state 130
    simple_expr      go to state 64
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70
    parm             go to state 131


state 110

   83 expr: expr ISEQUAL . simple_expr

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    simple_expr      go to state 161
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 111

   84 expr: expr NOTEQUAL . simple_expr

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    simple_expr      go to state 162
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 112

   86 expr: expr LESSTHAN . simple_expr

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    simple_expr      go to state 163
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 113

   88 expr: expr GREATERTHAN . simple_expr

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    simple_expr      go to state 164
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 114

   85 expr: expr LESSTHANEQUALS . simple_expr

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    simple_expr      go to state 165
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 115

   87 expr: expr GREATERTHANEQUALS . simple_expr

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    simple_expr      go to state 166
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 116

   94 simple_expr: simple_expr OR . term

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    term             go to state 167
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 117

   92 simple_expr: simple_expr PLUS . term

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    term             go to state 168
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 118

   93 simple_expr: simple_expr MINUS . term

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    term             go to state 169
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 119

  100 term: term AND . factor

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    factor           go to state 170
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 120

   96 term: term MULTIPLY . factor

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    factor           go to state 171
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 121

   97 term: term DIVIDE . factor

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    factor           go to state 172
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 122

   98 term: term DIV . factor

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    factor           go to state 173
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 123

   99 term: term MOD . factor

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    factor           go to state 174
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 124

  111 func_invok: plist_finvok RIGHTPAREN .

    $default  reduce using rule 111 (func_invok)


state 125

   63 compound_stat: error BEGIN_ stat_list END .

    $default  reduce using rule 63 (compound_stat)


state 126

   66 stat_list: stat_list . SEMICOLON stat
   67          | error SEMICOLON stat_list .

    SEMICOLON  shift, and go to state 81

    SEMICOLON  [reduce using rule 67 (stat_list)]
    $default   reduce using rule 67 (stat_list)


state 127

  116 struct_stat: IF expr THEN . matched_stat ELSE stat
  117            | IF expr THEN . stat

    error     shift, and go to state 132
    BEGIN_    shift, and go to state 18
    CONTINUE  shift, and go to state 175
    EXIT      shift, and go to state 176
    IF        shift, and go to state 177
    WHILE     shift, and go to state 178
    ID        shift, and go to state 33

    ELSE       reduce using rule 70 (simple_stat)
    END        reduce using rule 70 (simple_stat)
    SEMICOLON  reduce using rule 70 (simple_stat)

    compound_stat    go to state 34
    stat             go to state 179
    simple_stat      go to state 180
    proc_invok       go to state 38
    var              go to state 39
    subscripted_var  go to state 40
    plist_finvok     go to state 41
    struct_stat      go to state 42
    matched_stat     go to state 181


state 128

  118 struct_stat: WHILE expr DO . stat

    error     shift, and go to state 132
    BEGIN_    shift, and go to state 18
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    IF        shift, and go to state 31
    WHILE     shift, and go to state 32
    ID        shift, and go to state 33

    END        reduce using rule 70 (simple_stat)
    SEMICOLON  reduce using rule 70 (simple_stat)

    compound_stat    go to state 34
    stat             go to state 182
    simple_stat      go to state 37
    proc_invok       go to state 38
    var              go to state 39
    subscripted_var  go to state 40
    plist_finvok     go to state 41
    struct_stat      go to state 42


state 129

   75 proc_invok: ID LEFTPAREN RIGHTPAREN .

    $default  reduce using rule 75 (proc_invok)


state 130

   83 expr: expr . ISEQUAL simple_expr
   84     | expr . NOTEQUAL simple_expr
   85     | expr . LESSTHANEQUALS simple_expr
   86     | expr . LESSTHAN simple_expr
   87     | expr . GREATERTHANEQUALS simple_expr
   88     | expr . GREATERTHAN simple_expr
  115 parm: expr .

    ISEQUAL            shift, and go to state 110
    NOTEQUAL           shift, and go to state 111
    LESSTHAN           shift, and go to state 112
    GREATERTHAN        shift, and go to state 113
    LESSTHANEQUALS     shift, and go to state 114
    GREATERTHANEQUALS  shift, and go to state 115

    $default  reduce using rule 115 (parm)


state 131

  113 plist_finvok: ID LEFTPAREN parm .

    $default  reduce using rule 113 (plist_finvok)


state 132

   63 compound_stat: error . BEGIN_ stat_list END
   79 var: error . RIGHTBRACKET

    BEGIN_        shift, and go to state 27
    RIGHTBRACKET  shift, and go to state 76


state 133

   66 stat_list: stat_list SEMICOLON stat .

    $default  reduce using rule 66 (stat_list)


state 134

   71 simple_stat: var ASSIGN expr .
   83 expr: expr . ISEQUAL simple_expr
   84     | expr . NOTEQUAL simple_expr
   85     | expr . LESSTHANEQUALS simple_expr
   86     | expr . LESSTHAN simple_expr
   87     | expr . GREATERTHANEQUALS simple_expr
   88     | expr . GREATERTHAN simple_expr

    ISEQUAL            shift, and go to state 110
    NOTEQUAL           shift, and go to state 111
    LESSTHAN           shift, and go to state 112
    GREATERTHAN        shift, and go to state 113
    LESSTHANEQUALS     shift, and go to state 114
    GREATERTHANEQUALS  shift, and go to state 115

    $default  reduce using rule 71 (simple_stat)


state 135

   77 var: var PERIOD ID .

    $default  reduce using rule 77 (var)


state 136

   80 subscripted_var: var LEFTBRACKET expr .
   83 expr: expr . ISEQUAL simple_expr
   84     | expr . NOTEQUAL simple_expr
   85     | expr . LESSTHANEQUALS simple_expr
   86     | expr . LESSTHAN simple_expr
   87     | expr . GREATERTHANEQUALS simple_expr
   88     | expr . GREATERTHAN simple_expr

    ISEQUAL            shift, and go to state 110
    NOTEQUAL           shift, and go to state 111
    LESSTHAN           shift, and go to state 112
    GREATERTHAN        shift, and go to state 113
    LESSTHANEQUALS     shift, and go to state 114
    GREATERTHANEQUALS  shift, and go to state 115

    $default  reduce using rule 80 (subscripted_var)


state 137

   81 subscripted_var: subscripted_var COMMA expr .
   83 expr: expr . ISEQUAL simple_expr
   84     | expr . NOTEQUAL simple_expr
   85     | expr . LESSTHANEQUALS simple_expr
   86     | expr . LESSTHAN simple_expr
   87     | expr . GREATERTHANEQUALS simple_expr
   88     | expr . GREATERTHAN simple_expr

    ISEQUAL            shift, and go to state 110
    NOTEQUAL           shift, and go to state 111
    LESSTHAN           shift, and go to state 112
    GREATERTHAN        shift, and go to state 113
    LESSTHANEQUALS     shift, and go to state 114
    GREATERTHANEQUALS  shift, and go to state 115

    $default  reduce using rule 81 (subscripted_var)


state 138

  114 plist_finvok: plist_finvok COMMA parm .

    $default  reduce using rule 114 (plist_finvok)


state 139

   30 structured_type: error . END

    END  shift, and go to state 183


state 140

   28 structured_type: ARRAY . closed_array_type OF type

    LEFTBRACKET  shift, and go to state 184

    closed_array_type  go to state 185


state 141

   29 structured_type: RECORD . field_list END

    error  shift, and go to state 186
    ID     shift, and go to state 187

    field_list  go to state 188
    field       go to state 189


state 142

   24 scalar_type: LEFTPAREN . scalar_list RIGHTPAREN
   25            | LEFTPAREN . error RIGHTPAREN

    error  shift, and go to state 190
    ID     shift, and go to state 191

    scalar_list  go to state 192


state 143

   23 simple_type: ID .

    $default  reduce using rule 23 (simple_type)


state 144

   19 type_decl: ID ISEQUAL type .

    $default  reduce using rule 19 (type_decl)


state 145

   20 type: simple_type .

    $default  reduce using rule 20 (type)


state 146

   22 simple_type: scalar_type .

    $default  reduce using rule 22 (simple_type)


state 147

   21 type: structured_type .

    $default  reduce using rule 21 (type)


state 148

   18 type_decl_list: type_decl_list SEMICOLON type_decl .

    $default  reduce using rule 18 (type_decl_list)


state 149

   44 var_decl: ID COLON . type

    error      shift, and go to state 139
    ARRAY      shift, and go to state 140
    RECORD     shift, and go to state 141
    LEFTPAREN  shift, and go to state 142
    ID         shift, and go to state 143

    type             go to state 193
    simple_type      go to state 145
    scalar_type      go to state 146
    structured_type  go to state 147


state 150

   45 var_decl: ID COMMA . var_decl

    ID  shift, and go to state 92

    var_decl  go to state 194


state 151

   40 var_decl_part: VAR var_decl_list SEMICOLON .
   43 var_decl_list: var_decl_list SEMICOLON . var_decl

    ID  shift, and go to state 92

    $default  reduce using rule 40 (var_decl_part)

    var_decl  go to state 195


state 152

   53 proc_heading: error SEMICOLON .

    $default  reduce using rule 53 (proc_heading)


state 153

   52 proc_heading: FUNCTION ID . f_parm_decl COLON ID SEMICOLON

    LEFTPAREN  shift, and go to state 196

    f_parm_decl  go to state 197


state 154

   51 proc_heading: PROCEDURE ID . f_parm_decl SEMICOLON

    LEFTPAREN  shift, and go to state 196

    f_parm_decl  go to state 198


state 155

   49 proc_decl_list: proc_decl_list proc_decl .

    $default  reduce using rule 49 (proc_decl_list)


state 156

   50 proc_decl: proc_heading decls . compound_stat SEMICOLON

    error   shift, and go to state 17
    BEGIN_  shift, and go to state 18

    compound_stat  go to state 199


state 157

    3 program_head: PROGRAM ID LEFTPAREN ID COMMA ID RIGHTPAREN . SEMICOLON

    SEMICOLON  shift, and go to state 200


state 158

  104 factor: LEFTPAREN error RIGHTPAREN .

    $default  reduce using rule 104 (factor)


state 159

  103 factor: LEFTPAREN expr RIGHTPAREN .

    $default  reduce using rule 103 (factor)


state 160

  112 func_invok: ID LEFTPAREN RIGHTPAREN .

    $default  reduce using rule 112 (func_invok)


state 161

   83 expr: expr ISEQUAL simple_expr .
   92 simple_expr: simple_expr . PLUS term
   93            | simple_expr . MINUS term
   94            | simple_expr . OR term

    OR     shift, and go to state 116
    PLUS   shift, and go to state 117
    MINUS  shift, and go to state 118

    $default  reduce using rule 83 (expr)


state 162

   84 expr: expr NOTEQUAL simple_expr .
   92 simple_expr: simple_expr . PLUS term
   93            | simple_expr . MINUS term
   94            | simple_expr . OR term

    OR     shift, and go to state 116
    PLUS   shift, and go to state 117
    MINUS  shift, and go to state 118

    $default  reduce using rule 84 (expr)


state 163

   86 expr: expr LESSTHAN simple_expr .
   92 simple_expr: simple_expr . PLUS term
   93            | simple_expr . MINUS term
   94            | simple_expr . OR term

    OR     shift, and go to state 116
    PLUS   shift, and go to state 117
    MINUS  shift, and go to state 118

    $default  reduce using rule 86 (expr)


state 164

   88 expr: expr GREATERTHAN simple_expr .
   92 simple_expr: simple_expr . PLUS term
   93            | simple_expr . MINUS term
   94            | simple_expr . OR term

    OR     shift, and go to state 116
    PLUS   shift, and go to state 117
    MINUS  shift, and go to state 118

    $default  reduce using rule 88 (expr)


state 165

   85 expr: expr LESSTHANEQUALS simple_expr .
   92 simple_expr: simple_expr . PLUS term
   93            | simple_expr . MINUS term
   94            | simple_expr . OR term

    OR     shift, and go to state 116
    PLUS   shift, and go to state 117
    MINUS  shift, and go to state 118

    $default  reduce using rule 85 (expr)


state 166

   87 expr: expr GREATERTHANEQUALS simple_expr .
   92 simple_expr: simple_expr . PLUS term
   93            | simple_expr . MINUS term
   94            | simple_expr . OR term

    OR     shift, and go to state 116
    PLUS   shift, and go to state 117
    MINUS  shift, and go to state 118

    $default  reduce using rule 87 (expr)


state 167

   94 simple_expr: simple_expr OR term .
   96 term: term . MULTIPLY factor
   97     | term . DIVIDE factor
   98     | term . DIV factor
   99     | term . MOD factor
  100     | term . AND factor

    AND       shift, and go to state 119
    MULTIPLY  shift, and go to state 120
    DIVIDE    shift, and go to state 121
    DIV       shift, and go to state 122
    MOD       shift, and go to state 123

    $default  reduce using rule 94 (simple_expr)


state 168

   92 simple_expr: simple_expr PLUS term .
   96 term: term . MULTIPLY factor
   97     | term . DIVIDE factor
   98     | term . DIV factor
   99     | term . MOD factor
  100     | term . AND factor

    AND       shift, and go to state 119
    MULTIPLY  shift, and go to state 120
    DIVIDE    shift, and go to state 121
    DIV       shift, and go to state 122
    MOD       shift, and go to state 123

    $default  reduce using rule 92 (simple_expr)


state 169

   93 simple_expr: simple_expr MINUS term .
   96 term: term . MULTIPLY factor
   97     | term . DIVIDE factor
   98     | term . DIV factor
   99     | term . MOD factor
  100     | term . AND factor

    AND       shift, and go to state 119
    MULTIPLY  shift, and go to state 120
    DIVIDE    shift, and go to state 121
    DIV       shift, and go to state 122
    MOD       shift, and go to state 123

    $default  reduce using rule 93 (simple_expr)


state 170

  100 term: term AND factor .

    $default  reduce using rule 100 (term)


state 171

   96 term: term MULTIPLY factor .

    $default  reduce using rule 96 (term)


state 172

   97 term: term DIVIDE factor .

    $default  reduce using rule 97 (term)


state 173

   98 term: term DIV factor .

    $default  reduce using rule 98 (term)


state 174

   99 term: term MOD factor .

    $default  reduce using rule 99 (term)


state 175

  119 struct_stat: CONTINUE .
  124 matched_stat: CONTINUE .

    ELSE      reduce using rule 124 (matched_stat)
    $default  reduce using rule 119 (struct_stat)


state 176

  120 struct_stat: EXIT .
  125 matched_stat: EXIT .

    ELSE      reduce using rule 125 (matched_stat)
    $default  reduce using rule 120 (struct_stat)


state 177

  116 struct_stat: IF . expr THEN matched_stat ELSE stat
  117            | IF . expr THEN stat
  122 matched_stat: IF . expr THEN matched_stat ELSE matched_stat

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    expr             go to state 201
    simple_expr      go to state 64
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 178

  118 struct_stat: WHILE . expr DO stat
  123 matched_stat: WHILE . expr DO matched_stat

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    expr             go to state 202
    simple_expr      go to state 64
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 179

  117 struct_stat: IF expr THEN stat .

    $default  reduce using rule 117 (struct_stat)


state 180

   68 stat: simple_stat .
  121 matched_stat: simple_stat .

    ELSE      reduce using rule 121 (matched_stat)
    $default  reduce using rule 68 (stat)


state 181

  116 struct_stat: IF expr THEN matched_stat . ELSE stat

    ELSE  shift, and go to state 203


state 182

  118 struct_stat: WHILE expr DO stat .

    $default  reduce using rule 118 (struct_stat)


state 183

   30 structured_type: error END .

    $default  reduce using rule 30 (structured_type)


state 184

   31 closed_array_type: LEFTBRACKET . array_type RIGHTBRACKET
   32                  | LEFTBRACKET . error RIGHTBRACKET

    error       shift, and go to state 204
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    array_type       go to state 205
    var              go to state 62
    subscripted_var  go to state 40
    expr             go to state 206
    simple_expr      go to state 64
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 185

   28 structured_type: ARRAY closed_array_type . OF type

    OF  shift, and go to state 207


state 186

   37 field_list: error . SEMICOLON field_list

    SEMICOLON  shift, and go to state 208


state 187

   38 field: ID . COLON type

    COLON  shift, and go to state 209


state 188

   29 structured_type: RECORD field_list . END
   36 field_list: field_list . SEMICOLON field

    END        shift, and go to state 210
    SEMICOLON  shift, and go to state 211


state 189

   35 field_list: field .

    $default  reduce using rule 35 (field_list)


state 190

   25 scalar_type: LEFTPAREN error . RIGHTPAREN

    RIGHTPAREN  shift, and go to state 212


state 191

   26 scalar_list: ID .

    $default  reduce using rule 26 (scalar_list)


state 192

   24 scalar_type: LEFTPAREN scalar_list . RIGHTPAREN
   27 scalar_list: scalar_list . COMMA ID

    RIGHTPAREN  shift, and go to state 213
    COMMA       shift, and go to state 214


state 193

   44 var_decl: ID COLON type .

    $default  reduce using rule 44 (var_decl)


state 194

   45 var_decl: ID COMMA var_decl .

    $default  reduce using rule 45 (var_decl)


state 195

   43 var_decl_list: var_decl_list SEMICOLON var_decl .

    $default  reduce using rule 43 (var_decl_list)


state 196

   54 f_parm_decl: LEFTPAREN . f_parm_list RIGHTPAREN
   55            | LEFTPAREN . error RIGHTPAREN
   56            | LEFTPAREN . RIGHTPAREN

    error       shift, and go to state 215
    ARRAY       shift, and go to state 140
    RECORD      shift, and go to state 141
    VAR         shift, and go to state 216
    LEFTPAREN   shift, and go to state 142
    RIGHTPAREN  shift, and go to state 217
    ID          shift, and go to state 143

    type             go to state 218
    simple_type      go to state 145
    scalar_type      go to state 146
    structured_type  go to state 147
    f_parm_list      go to state 219
    f_parm           go to state 220


state 197

   52 proc_heading: FUNCTION ID f_parm_decl . COLON ID SEMICOLON

    COLON  shift, and go to state 221


state 198

   51 proc_heading: PROCEDURE ID f_parm_decl . SEMICOLON

    SEMICOLON  shift, and go to state 222


state 199

   50 proc_decl: proc_heading decls compound_stat . SEMICOLON

    SEMICOLON  shift, and go to state 223


state 200

    3 program_head: PROGRAM ID LEFTPAREN ID COMMA ID RIGHTPAREN SEMICOLON .

    $default  reduce using rule 3 (program_head)


state 201

   83 expr: expr . ISEQUAL simple_expr
   84     | expr . NOTEQUAL simple_expr
   85     | expr . LESSTHANEQUALS simple_expr
   86     | expr . LESSTHAN simple_expr
   87     | expr . GREATERTHANEQUALS simple_expr
   88     | expr . GREATERTHAN simple_expr
  116 struct_stat: IF expr . THEN matched_stat ELSE stat
  117            | IF expr . THEN stat
  122 matched_stat: IF expr . THEN matched_stat ELSE matched_stat

    THEN               shift, and go to state 224
    ISEQUAL            shift, and go to state 110
    NOTEQUAL           shift, and go to state 111
    LESSTHAN           shift, and go to state 112
    GREATERTHAN        shift, and go to state 113
    LESSTHANEQUALS     shift, and go to state 114
    GREATERTHANEQUALS  shift, and go to state 115


state 202

   83 expr: expr . ISEQUAL simple_expr
   84     | expr . NOTEQUAL simple_expr
   85     | expr . LESSTHANEQUALS simple_expr
   86     | expr . LESSTHAN simple_expr
   87     | expr . GREATERTHANEQUALS simple_expr
   88     | expr . GREATERTHAN simple_expr
  118 struct_stat: WHILE expr . DO stat
  123 matched_stat: WHILE expr . DO matched_stat

    DO                 shift, and go to state 225
    ISEQUAL            shift, and go to state 110
    NOTEQUAL           shift, and go to state 111
    LESSTHAN           shift, and go to state 112
    GREATERTHAN        shift, and go to state 113
    LESSTHANEQUALS     shift, and go to state 114
    GREATERTHANEQUALS  shift, and go to state 115


state 203

  116 struct_stat: IF expr THEN matched_stat ELSE . stat

    error     shift, and go to state 132
    BEGIN_    shift, and go to state 18
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    IF        shift, and go to state 31
    WHILE     shift, and go to state 32
    ID        shift, and go to state 33

    END        reduce using rule 70 (simple_stat)
    SEMICOLON  reduce using rule 70 (simple_stat)

    compound_stat    go to state 34
    stat             go to state 226
    simple_stat      go to state 37
    proc_invok       go to state 38
    var              go to state 39
    subscripted_var  go to state 40
    plist_finvok     go to state 41
    struct_stat      go to state 42


state 204

   32 closed_array_type: LEFTBRACKET error . RIGHTBRACKET
   79 var: error . RIGHTBRACKET

    RIGHTBRACKET  shift, and go to state 227


state 205

   31 closed_array_type: LEFTBRACKET array_type . RIGHTBRACKET

    RIGHTBRACKET  shift, and go to state 228


state 206

   33 array_type: expr .
   34           | expr . DOUBLEPERIOD expr
   83 expr: expr . ISEQUAL simple_expr
   84     | expr . NOTEQUAL simple_expr
   85     | expr . LESSTHANEQUALS simple_expr
   86     | expr . LESSTHAN simple_expr
   87     | expr . GREATERTHANEQUALS simple_expr
   88     | expr . GREATERTHAN simple_expr

    ISEQUAL            shift, and go to state 110
    NOTEQUAL           shift, and go to state 111
    LESSTHAN           shift, and go to state 112
    GREATERTHAN        shift, and go to state 113
    LESSTHANEQUALS     shift, and go to state 114
    GREATERTHANEQUALS  shift, and go to state 115
    DOUBLEPERIOD       shift, and go to state 229

    $default  reduce using rule 33 (array_type)


state 207

   28 structured_type: ARRAY closed_array_type OF . type

    error      shift, and go to state 139
    ARRAY      shift, and go to state 140
    RECORD     shift, and go to state 141
    LEFTPAREN  shift, and go to state 142
    ID         shift, and go to state 143

    type             go to state 230
    simple_type      go to state 145
    scalar_type      go to state 146
    structured_type  go to state 147


state 208

   37 field_list: error SEMICOLON . field_list

    error  shift, and go to state 186
    ID     shift, and go to state 187

    field_list  go to state 231
    field       go to state 189


state 209

   38 field: ID COLON . type

    error      shift, and go to state 139
    ARRAY      shift, and go to state 140
    RECORD     shift, and go to state 141
    LEFTPAREN  shift, and go to state 142
    ID         shift, and go to state 143

    type             go to state 232
    simple_type      go to state 145
    scalar_type      go to state 146
    structured_type  go to state 147


state 210

   29 structured_type: RECORD field_list END .

    $default  reduce using rule 29 (structured_type)


state 211

   36 field_list: field_list SEMICOLON . field

    ID  shift, and go to state 187

    field  go to state 233


state 212

   25 scalar_type: LEFTPAREN error RIGHTPAREN .

    $default  reduce using rule 25 (scalar_type)


state 213

   24 scalar_type: LEFTPAREN scalar_list RIGHTPAREN .

    $default  reduce using rule 24 (scalar_type)


state 214

   27 scalar_list: scalar_list COMMA . ID

    ID  shift, and go to state 234


state 215

   30 structured_type: error . END
   55 f_parm_decl: LEFTPAREN error . RIGHTPAREN
   59 f_parm_list: error . SEMICOLON f_parm_list

    END         shift, and go to state 183
    RIGHTPAREN  shift, and go to state 235
    SEMICOLON   shift, and go to state 236


state 216

   61 f_parm: VAR . type COLON type

    error      shift, and go to state 139
    ARRAY      shift, and go to state 140
    RECORD     shift, and go to state 141
    LEFTPAREN  shift, and go to state 142
    ID         shift, and go to state 143

    type             go to state 237
    simple_type      go to state 145
    scalar_type      go to state 146
    structured_type  go to state 147


state 217

   56 f_parm_decl: LEFTPAREN RIGHTPAREN .

    $default  reduce using rule 56 (f_parm_decl)


state 218

   60 f_parm: type . COLON type

    COLON  shift, and go to state 238


state 219

   54 f_parm_decl: LEFTPAREN f_parm_list . RIGHTPAREN
   58 f_parm_list: f_parm_list . SEMICOLON f_parm

    RIGHTPAREN  shift, and go to state 239
    SEMICOLON   shift, and go to state 240


state 220

   57 f_parm_list: f_parm .

    $default  reduce using rule 57 (f_parm_list)


state 221

   52 proc_heading: FUNCTION ID f_parm_decl COLON . ID SEMICOLON

    ID  shift, and go to state 241


state 222

   51 proc_heading: PROCEDURE ID f_parm_decl SEMICOLON .

    $default  reduce using rule 51 (proc_heading)


state 223

   50 proc_decl: proc_heading decls compound_stat SEMICOLON .

    $default  reduce using rule 50 (proc_decl)


state 224

  116 struct_stat: IF expr THEN . matched_stat ELSE stat
  117            | IF expr THEN . stat
  122 matched_stat: IF expr THEN . matched_stat ELSE matched_stat

    error     shift, and go to state 132
    BEGIN_    shift, and go to state 18
    CONTINUE  shift, and go to state 175
    EXIT      shift, and go to state 176
    IF        shift, and go to state 177
    WHILE     shift, and go to state 178
    ID        shift, and go to state 33

    ELSE       reduce using rule 70 (simple_stat)
    END        reduce using rule 70 (simple_stat)
    SEMICOLON  reduce using rule 70 (simple_stat)

    compound_stat    go to state 34
    stat             go to state 179
    simple_stat      go to state 180
    proc_invok       go to state 38
    var              go to state 39
    subscripted_var  go to state 40
    plist_finvok     go to state 41
    struct_stat      go to state 42
    matched_stat     go to state 242


state 225

  118 struct_stat: WHILE expr DO . stat
  123 matched_stat: WHILE expr DO . matched_stat

    error     shift, and go to state 132
    BEGIN_    shift, and go to state 18
    CONTINUE  shift, and go to state 175
    EXIT      shift, and go to state 176
    IF        shift, and go to state 177
    WHILE     shift, and go to state 178
    ID        shift, and go to state 33

    ELSE       reduce using rule 70 (simple_stat)
    END        reduce using rule 70 (simple_stat)
    SEMICOLON  reduce using rule 70 (simple_stat)

    compound_stat    go to state 34
    stat             go to state 182
    simple_stat      go to state 180
    proc_invok       go to state 38
    var              go to state 39
    subscripted_var  go to state 40
    plist_finvok     go to state 41
    struct_stat      go to state 42
    matched_stat     go to state 243


state 226

  116 struct_stat: IF expr THEN matched_stat ELSE stat .

    $default  reduce using rule 116 (struct_stat)


state 227

   32 closed_array_type: LEFTBRACKET error RIGHTBRACKET .
   79 var: error RIGHTBRACKET .

    OF        reduce using rule 32 (closed_array_type)
    $default  reduce using rule 79 (var)


state 228

   31 closed_array_type: LEFTBRACKET array_type RIGHTBRACKET .

    $default  reduce using rule 31 (closed_array_type)


state 229

   34 array_type: expr DOUBLEPERIOD . expr

    error       shift, and go to state 53
    NOT         shift, and go to state 54
    PLUS        shift, and go to state 55
    MINUS       shift, and go to state 56
    LEFTPAREN   shift, and go to state 57
    ID          shift, and go to state 58
    INT_CONST   shift, and go to state 59
    REAL_CONST  shift, and go to state 60
    STRING      shift, and go to state 61

    var              go to state 62
    subscripted_var  go to state 40
    expr             go to state 244
    simple_expr      go to state 64
    term             go to state 65
    factor           go to state 66
    unsigned_const   go to state 67
    unsigned_num     go to state 68
    func_invok       go to state 69
    plist_finvok     go to state 70


state 230

   28 structured_type: ARRAY closed_array_type OF type .

    $default  reduce using rule 28 (structured_type)


state 231

   36 field_list: field_list . SEMICOLON field
   37           | error SEMICOLON field_list .

    SEMICOLON  shift, and go to state 211

    SEMICOLON  [reduce using rule 37 (field_list)]
    $default   reduce using rule 37 (field_list)


state 232

   38 field: ID COLON type .

    $default  reduce using rule 38 (field)


state 233

   36 field_list: field_list SEMICOLON field .

    $default  reduce using rule 36 (field_list)


state 234

   27 scalar_list: scalar_list COMMA ID .

    $default  reduce using rule 27 (scalar_list)


state 235

   55 f_parm_decl: LEFTPAREN error RIGHTPAREN .

    $default  reduce using rule 55 (f_parm_decl)


state 236

   59 f_parm_list: error SEMICOLON . f_parm_list

    error      shift, and go to state 245
    ARRAY      shift, and go to state 140
    RECORD     shift, and go to state 141
    VAR        shift, and go to state 216
    LEFTPAREN  shift, and go to state 142
    ID         shift, and go to state 143

    type             go to state 218
    simple_type      go to state 145
    scalar_type      go to state 146
    structured_type  go to state 147
    f_parm_list      go to state 246
    f_parm           go to state 220


state 237

   61 f_parm: VAR type . COLON type

    COLON  shift, and go to state 247


state 238

   60 f_parm: type COLON . type

    error      shift, and go to state 139
    ARRAY      shift, and go to state 140
    RECORD     shift, and go to state 141
    LEFTPAREN  shift, and go to state 142
    ID         shift, and go to state 143

    type             go to state 248
    simple_type      go to state 145
    scalar_type      go to state 146
    structured_type  go to state 147


state 239

   54 f_parm_decl: LEFTPAREN f_parm_list RIGHTPAREN .

    $default  reduce using rule 54 (f_parm_decl)


state 240

   58 f_parm_list: f_parm_list SEMICOLON . f_parm

    error      shift, and go to state 139
    ARRAY      shift, and go to state 140
    RECORD     shift, and go to state 141
    VAR        shift, and go to state 216
    LEFTPAREN  shift, and go to state 142
    ID         shift, and go to state 143

    type             go to state 218
    simple_type      go to state 145
    scalar_type      go to state 146
    structured_type  go to state 147
    f_parm           go to state 249


state 241

   52 proc_heading: FUNCTION ID f_parm_decl COLON ID . SEMICOLON

    SEMICOLON  shift, and go to state 250


state 242

  116 struct_stat: IF expr THEN matched_stat . ELSE stat
  122 matched_stat: IF expr THEN matched_stat . ELSE matched_stat

    ELSE  shift, and go to state 251


state 243

  123 matched_stat: WHILE expr DO matched_stat .

    $default  reduce using rule 123 (matched_stat)


state 244

   34 array_type: expr DOUBLEPERIOD expr .
   83 expr: expr . ISEQUAL simple_expr
   84     | expr . NOTEQUAL simple_expr
   85     | expr . LESSTHANEQUALS simple_expr
   86     | expr . LESSTHAN simple_expr
   87     | expr . GREATERTHANEQUALS simple_expr
   88     | expr . GREATERTHAN simple_expr

    ISEQUAL            shift, and go to state 110
    NOTEQUAL           shift, and go to state 111
    LESSTHAN           shift, and go to state 112
    GREATERTHAN        shift, and go to state 113
    LESSTHANEQUALS     shift, and go to state 114
    GREATERTHANEQUALS  shift, and go to state 115

    $default  reduce using rule 34 (array_type)


state 245

   30 structured_type: error . END
   59 f_parm_list: error . SEMICOLON f_parm_list

    END        shift, and go to state 183
    SEMICOLON  shift, and go to state 236


state 246

   58 f_parm_list: f_parm_list . SEMICOLON f_parm
   59            | error SEMICOLON f_parm_list .

    SEMICOLON  shift, and go to state 240

    SEMICOLON  [reduce using rule 59 (f_parm_list)]
    $default   reduce using rule 59 (f_parm_list)


state 247

   61 f_parm: VAR type COLON . type

    error      shift, and go to state 139
    ARRAY      shift, and go to state 140
    RECORD     shift, and go to state 141
    LEFTPAREN  shift, and go to state 142
    ID         shift, and go to state 143

    type             go to state 252
    simple_type      go to state 145
    scalar_type      go to state 146
    structured_type  go to state 147


state 248

   60 f_parm: type COLON type .

    $default  reduce using rule 60 (f_parm)


state 249

   58 f_parm_list: f_parm_list SEMICOLON f_parm .

    $default  reduce using rule 58 (f_parm_list)


state 250

   52 proc_heading: FUNCTION ID f_parm_decl COLON ID SEMICOLON .

    $default  reduce using rule 52 (proc_heading)


state 251

  116 struct_stat: IF expr THEN matched_stat ELSE . stat
  122 matched_stat: IF expr THEN matched_stat ELSE . matched_stat

    error     shift, and go to state 132
    BEGIN_    shift, and go to state 18
    CONTINUE  shift, and go to state 175
    EXIT      shift, and go to state 176
    IF        shift, and go to state 177
    WHILE     shift, and go to state 178
    ID        shift, and go to state 33

    ELSE       reduce using rule 70 (simple_stat)
    END        reduce using rule 70 (simple_stat)
    SEMICOLON  reduce using rule 70 (simple_stat)

    compound_stat    go to state 34
    stat             go to state 226
    simple_stat      go to state 180
    proc_invok       go to state 38
    var              go to state 39
    subscripted_var  go to state 40
    plist_finvok     go to state 41
    struct_stat      go to state 42
    matched_stat     go to state 253


state 252

   61 f_parm: VAR type COLON type .

    $default  reduce using rule 61 (f_parm)


state 253

  122 matched_stat: IF expr THEN matched_stat ELSE matched_stat .

    $default  reduce using rule 122 (matched_stat)
