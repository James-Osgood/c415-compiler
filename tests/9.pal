{
    9.pal
    Tests invalid function bodies (missing return assignments), invalid array bounds, and invalid use of program header symbols.
    Errors:
    16:28 illegal array range
    17:25 missing lower or upper bound
    19:17 input_type is already defined as a file object thing
    55:0 missing function return value assignment
    78:60 cannot call a program
}
program mostness(inputtype, outputtype);

type xType = (x1, x2, x3);

var xArray : array[xType] of integer;
    badArray : array[-2..-5] of integer; { $ERR_DATA$ [28, "illegal array range", ["lower bound is greater than upper bound"]] $ERR_DATA$ }
    anotherBad : array[5] of char; { $ERR_DATA$ [25, "missing lower or upper bound", ["array index missing lower bound"]] $ERR_DATA$ }
    y : xType;
    inputtype : char; { $ERR_DATA$ [17, "input_type is already defined as a file object thing", ["symbol 'input_type' is being redefined in this level"]] $ERR_DATA$ }

function canIReturn(x : xType; i : integer) : xType;
    var outputtype : char; // Legal.
    
begin
    if (xArray[x] = i) then
        y := x // Should be an error, but ISN'T for cp2 (missing return value for at least one condition)
    else
        canIReturn := canIReturn(x, i + 1)
end;

function doIReturn(var y : boolean) : integer;
begin
    if y then
        doIReturn := 5
    else
        y := true
end; // Should be an error, but ISN'T for cp2 (missing return value for at least one condition)

function returnValue() : integer;
begin
    while false do
        returnValue := 0;

    if doIReturn(y = x1) = 1 then
        returnValue := 5
end; // Should be an error, but ISN'T for cp2 (missing return value for at least one condition)

function funVarStuff() : integer;
    procedure varStuff(var int : integer);
    begin
        int := 3;
    end;
begin
    varStuff(funVarStuff);2147483647
end;{ $ERR_DATA$ [0, "missing function return value assignment", ["missing function return value assignment"]] $ERR_DATA$ }

function correctReturn(int : integer) : boolean;
begin
    if int >= 19 then
        correctReturn := true
    else
        if int <= -10 then
            correctReturn := false
        else if int <= 0 then
            correctReturn := true
        else
            correctReturn := false
end;

procedure testAllBuiltins();
    const aww = 2147483647;
          waa = '';

    type sclist = (d1,d2,d3,d4);
          
    var a: integer;
        b3 : char;
        c:sclist;
begin
    a := succ(aww); // Error!
    b3 := pred(waa); // Error!
    b3 := chr(256); // Error!
    b3 := pred(chr(0)); // Error!
    c := succ(true); // Error!
    c := pred(false); // Error!
    c := succ(d4); // Error!
    c := pred(d1); // Error!
end;

begin

mostness(inputtype, outputtype); { $ERR_DATA$ [60, "cannot call a program", ["program 'mostness' cannot be called"]] $ERR_DATA$ }

end.
