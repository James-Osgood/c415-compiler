// Get the type checking to work ...

program testTypes(input, output);

const aNum = 1;
      aNum = 2;
      anotherbob = aNum;

type bob = (enum1, enum2);
     clark = bob;
     enum0 = (e00, e01, e02);
     bool = boolean;
     athing = array[1..10] of char;
     arec = record blah : integer end;
     anotherrec = record blah : boolean; end;

var joe : bob;
    text : clark;
    bar : athing;
    e11 : enum0;
    aboolean : bool;

procedure foo(joe : enum0; foo :enum0);
    type enum1 = (e00, e11, e02);
         joe = bool;
    begin
    end;
    
procedure test(var bob : clark; jim : boolean);
    begin
    end;
    
function asdf(tool : bob) : bob;
begin
    anotherbob := tool;
    asdf := enum2;
end;
    
    
procedure tim();
    var joe : (e1, ererer);
begin
    //joe := not 2;
end;
    
begin

test();
test(enum1, true);
test(text, enum0);
test(text, e11);
test(text, aboolean);
joe := test(text, aboolean);
test(text, aboolean, joe);

joe := asdf();
joe := asdf(joe);
bar := asdf(joe);
joe := asdf(e11);
joe := asdf(joe, e11);

writeln;
writeln();
writeln(aNum, anotherbob);

if (1 <> 0) then
    writeln
else if (aboolean) then
    writeln()
else
    foo(e11, e11);

while 1 <> 0 do
begin
exit;
end;

while aboolean do
begin
continue;
end;

while aboolean do
continue;

exit;

while asdf(joe) do
begin
end;

continue;

if (1) then
    writeln;
    
if (text) then
    writeln;

end.
